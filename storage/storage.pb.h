// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/storage.proto

#ifndef PROTOBUF_storage_2fstorage_2eproto__INCLUDED
#define PROTOBUF_storage_2fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "storage/entities.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_storage_2fstorage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[30];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetDriveRequestImpl();
void InitDefaultsGetDriveRequest();
void InitDefaultsGetDriveResponseImpl();
void InitDefaultsGetDriveResponse();
void InitDefaultsGetDrivesRequestImpl();
void InitDefaultsGetDrivesRequest();
void InitDefaultsGetDrivesResponseImpl();
void InitDefaultsGetDrivesResponse();
void InitDefaultsGetItemRequestImpl();
void InitDefaultsGetItemRequest();
void InitDefaultsGetItemResponseImpl();
void InitDefaultsGetItemResponse();
void InitDefaultsGetChildrenRequestImpl();
void InitDefaultsGetChildrenRequest();
void InitDefaultsGetChildrenResponseImpl();
void InitDefaultsGetChildrenResponse();
void InitDefaultsGetContentRequestImpl();
void InitDefaultsGetContentRequest();
void InitDefaultsGetContentResponseImpl();
void InitDefaultsGetContentResponse();
void InitDefaultsGetContentStreamRequestImpl();
void InitDefaultsGetContentStreamRequest();
void InitDefaultsGetContentStreamResponseImpl();
void InitDefaultsGetContentStreamResponse();
void InitDefaultsCreateDriveRequestImpl();
void InitDefaultsCreateDriveRequest();
void InitDefaultsCreateDriveResponseImpl();
void InitDefaultsCreateDriveResponse();
void InitDefaultsCreateItemRequestImpl();
void InitDefaultsCreateItemRequest();
void InitDefaultsCreateItemResponseImpl();
void InitDefaultsCreateItemResponse();
void InitDefaultsPutContentStreamRequestImpl();
void InitDefaultsPutContentStreamRequest();
void InitDefaultsPutContentStreamResponseImpl();
void InitDefaultsPutContentStreamResponse();
void InitDefaultsTruncateContentRequestImpl();
void InitDefaultsTruncateContentRequest();
void InitDefaultsTruncateContentResponseImpl();
void InitDefaultsTruncateContentResponse();
void InitDefaultsUpdateDriveRequestImpl();
void InitDefaultsUpdateDriveRequest();
void InitDefaultsUpdateDriveResponseImpl();
void InitDefaultsUpdateDriveResponse();
void InitDefaultsUpdateItemRequestImpl();
void InitDefaultsUpdateItemRequest();
void InitDefaultsUpdateItemResponseImpl();
void InitDefaultsUpdateItemResponse();
void InitDefaultsRemoveDriveRequestImpl();
void InitDefaultsRemoveDriveRequest();
void InitDefaultsRemoveDriveResponseImpl();
void InitDefaultsRemoveDriveResponse();
void InitDefaultsRemoveItemRequestImpl();
void InitDefaultsRemoveItemRequest();
void InitDefaultsRemoveItemResponseImpl();
void InitDefaultsRemoveItemResponse();
void InitDefaultsWatchChangesRequestImpl();
void InitDefaultsWatchChangesRequest();
void InitDefaultsWatchChangesResponseImpl();
void InitDefaultsWatchChangesResponse();
inline void InitDefaults() {
  InitDefaultsGetDriveRequest();
  InitDefaultsGetDriveResponse();
  InitDefaultsGetDrivesRequest();
  InitDefaultsGetDrivesResponse();
  InitDefaultsGetItemRequest();
  InitDefaultsGetItemResponse();
  InitDefaultsGetChildrenRequest();
  InitDefaultsGetChildrenResponse();
  InitDefaultsGetContentRequest();
  InitDefaultsGetContentResponse();
  InitDefaultsGetContentStreamRequest();
  InitDefaultsGetContentStreamResponse();
  InitDefaultsCreateDriveRequest();
  InitDefaultsCreateDriveResponse();
  InitDefaultsCreateItemRequest();
  InitDefaultsCreateItemResponse();
  InitDefaultsPutContentStreamRequest();
  InitDefaultsPutContentStreamResponse();
  InitDefaultsTruncateContentRequest();
  InitDefaultsTruncateContentResponse();
  InitDefaultsUpdateDriveRequest();
  InitDefaultsUpdateDriveResponse();
  InitDefaultsUpdateItemRequest();
  InitDefaultsUpdateItemResponse();
  InitDefaultsRemoveDriveRequest();
  InitDefaultsRemoveDriveResponse();
  InitDefaultsRemoveItemRequest();
  InitDefaultsRemoveItemResponse();
  InitDefaultsWatchChangesRequest();
  InitDefaultsWatchChangesResponse();
}
}  // namespace protobuf_storage_2fstorage_2eproto
namespace grpc_services {
namespace storage {
class CreateDriveRequest;
class CreateDriveRequestDefaultTypeInternal;
extern CreateDriveRequestDefaultTypeInternal _CreateDriveRequest_default_instance_;
class CreateDriveResponse;
class CreateDriveResponseDefaultTypeInternal;
extern CreateDriveResponseDefaultTypeInternal _CreateDriveResponse_default_instance_;
class CreateItemRequest;
class CreateItemRequestDefaultTypeInternal;
extern CreateItemRequestDefaultTypeInternal _CreateItemRequest_default_instance_;
class CreateItemResponse;
class CreateItemResponseDefaultTypeInternal;
extern CreateItemResponseDefaultTypeInternal _CreateItemResponse_default_instance_;
class GetChildrenRequest;
class GetChildrenRequestDefaultTypeInternal;
extern GetChildrenRequestDefaultTypeInternal _GetChildrenRequest_default_instance_;
class GetChildrenResponse;
class GetChildrenResponseDefaultTypeInternal;
extern GetChildrenResponseDefaultTypeInternal _GetChildrenResponse_default_instance_;
class GetContentRequest;
class GetContentRequestDefaultTypeInternal;
extern GetContentRequestDefaultTypeInternal _GetContentRequest_default_instance_;
class GetContentResponse;
class GetContentResponseDefaultTypeInternal;
extern GetContentResponseDefaultTypeInternal _GetContentResponse_default_instance_;
class GetContentStreamRequest;
class GetContentStreamRequestDefaultTypeInternal;
extern GetContentStreamRequestDefaultTypeInternal _GetContentStreamRequest_default_instance_;
class GetContentStreamResponse;
class GetContentStreamResponseDefaultTypeInternal;
extern GetContentStreamResponseDefaultTypeInternal _GetContentStreamResponse_default_instance_;
class GetDriveRequest;
class GetDriveRequestDefaultTypeInternal;
extern GetDriveRequestDefaultTypeInternal _GetDriveRequest_default_instance_;
class GetDriveResponse;
class GetDriveResponseDefaultTypeInternal;
extern GetDriveResponseDefaultTypeInternal _GetDriveResponse_default_instance_;
class GetDrivesRequest;
class GetDrivesRequestDefaultTypeInternal;
extern GetDrivesRequestDefaultTypeInternal _GetDrivesRequest_default_instance_;
class GetDrivesResponse;
class GetDrivesResponseDefaultTypeInternal;
extern GetDrivesResponseDefaultTypeInternal _GetDrivesResponse_default_instance_;
class GetItemRequest;
class GetItemRequestDefaultTypeInternal;
extern GetItemRequestDefaultTypeInternal _GetItemRequest_default_instance_;
class GetItemResponse;
class GetItemResponseDefaultTypeInternal;
extern GetItemResponseDefaultTypeInternal _GetItemResponse_default_instance_;
class PutContentStreamRequest;
class PutContentStreamRequestDefaultTypeInternal;
extern PutContentStreamRequestDefaultTypeInternal _PutContentStreamRequest_default_instance_;
class PutContentStreamResponse;
class PutContentStreamResponseDefaultTypeInternal;
extern PutContentStreamResponseDefaultTypeInternal _PutContentStreamResponse_default_instance_;
class RemoveDriveRequest;
class RemoveDriveRequestDefaultTypeInternal;
extern RemoveDriveRequestDefaultTypeInternal _RemoveDriveRequest_default_instance_;
class RemoveDriveResponse;
class RemoveDriveResponseDefaultTypeInternal;
extern RemoveDriveResponseDefaultTypeInternal _RemoveDriveResponse_default_instance_;
class RemoveItemRequest;
class RemoveItemRequestDefaultTypeInternal;
extern RemoveItemRequestDefaultTypeInternal _RemoveItemRequest_default_instance_;
class RemoveItemResponse;
class RemoveItemResponseDefaultTypeInternal;
extern RemoveItemResponseDefaultTypeInternal _RemoveItemResponse_default_instance_;
class TruncateContentRequest;
class TruncateContentRequestDefaultTypeInternal;
extern TruncateContentRequestDefaultTypeInternal _TruncateContentRequest_default_instance_;
class TruncateContentResponse;
class TruncateContentResponseDefaultTypeInternal;
extern TruncateContentResponseDefaultTypeInternal _TruncateContentResponse_default_instance_;
class UpdateDriveRequest;
class UpdateDriveRequestDefaultTypeInternal;
extern UpdateDriveRequestDefaultTypeInternal _UpdateDriveRequest_default_instance_;
class UpdateDriveResponse;
class UpdateDriveResponseDefaultTypeInternal;
extern UpdateDriveResponseDefaultTypeInternal _UpdateDriveResponse_default_instance_;
class UpdateItemRequest;
class UpdateItemRequestDefaultTypeInternal;
extern UpdateItemRequestDefaultTypeInternal _UpdateItemRequest_default_instance_;
class UpdateItemResponse;
class UpdateItemResponseDefaultTypeInternal;
extern UpdateItemResponseDefaultTypeInternal _UpdateItemResponse_default_instance_;
class WatchChangesRequest;
class WatchChangesRequestDefaultTypeInternal;
extern WatchChangesRequestDefaultTypeInternal _WatchChangesRequest_default_instance_;
class WatchChangesResponse;
class WatchChangesResponseDefaultTypeInternal;
extern WatchChangesResponseDefaultTypeInternal _WatchChangesResponse_default_instance_;
}  // namespace storage
}  // namespace grpc_services
namespace grpc_services {
namespace storage {

// ===================================================================

class GetDriveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDriveRequest) */ {
 public:
  GetDriveRequest();
  virtual ~GetDriveRequest();

  GetDriveRequest(const GetDriveRequest& from);

  inline GetDriveRequest& operator=(const GetDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDriveRequest(GetDriveRequest&& from) noexcept
    : GetDriveRequest() {
    *this = ::std::move(from);
  }

  inline GetDriveRequest& operator=(GetDriveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDriveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDriveRequest* internal_default_instance() {
    return reinterpret_cast<const GetDriveRequest*>(
               &_GetDriveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetDriveRequest* other);
  friend void swap(GetDriveRequest& a, GetDriveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDriveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDriveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDriveRequest& from);
  void MergeFrom(const GetDriveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDriveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDriveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetDriveRequestImpl();
};
// -------------------------------------------------------------------

class GetDriveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDriveResponse) */ {
 public:
  GetDriveResponse();
  virtual ~GetDriveResponse();

  GetDriveResponse(const GetDriveResponse& from);

  inline GetDriveResponse& operator=(const GetDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDriveResponse(GetDriveResponse&& from) noexcept
    : GetDriveResponse() {
    *this = ::std::move(from);
  }

  inline GetDriveResponse& operator=(GetDriveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDriveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDriveResponse* internal_default_instance() {
    return reinterpret_cast<const GetDriveResponse*>(
               &_GetDriveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetDriveResponse* other);
  friend void swap(GetDriveResponse& a, GetDriveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDriveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDriveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDriveResponse& from);
  void MergeFrom(const GetDriveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDriveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 1;
  const ::grpc_services::storage::Drive& drive() const;
  ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDriveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Drive* drive_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetDriveResponseImpl();
};
// -------------------------------------------------------------------

class GetDrivesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDrivesRequest) */ {
 public:
  GetDrivesRequest();
  virtual ~GetDrivesRequest();

  GetDrivesRequest(const GetDrivesRequest& from);

  inline GetDrivesRequest& operator=(const GetDrivesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDrivesRequest(GetDrivesRequest&& from) noexcept
    : GetDrivesRequest() {
    *this = ::std::move(from);
  }

  inline GetDrivesRequest& operator=(GetDrivesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDrivesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDrivesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDrivesRequest*>(
               &_GetDrivesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetDrivesRequest* other);
  friend void swap(GetDrivesRequest& a, GetDrivesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDrivesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDrivesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDrivesRequest& from);
  void MergeFrom(const GetDrivesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDrivesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDrivesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetDrivesRequestImpl();
};
// -------------------------------------------------------------------

class GetDrivesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetDrivesResponse) */ {
 public:
  GetDrivesResponse();
  virtual ~GetDrivesResponse();

  GetDrivesResponse(const GetDrivesResponse& from);

  inline GetDrivesResponse& operator=(const GetDrivesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDrivesResponse(GetDrivesResponse&& from) noexcept
    : GetDrivesResponse() {
    *this = ::std::move(from);
  }

  inline GetDrivesResponse& operator=(GetDrivesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDrivesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDrivesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDrivesResponse*>(
               &_GetDrivesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetDrivesResponse* other);
  friend void swap(GetDrivesResponse& a, GetDrivesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDrivesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDrivesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDrivesResponse& from);
  void MergeFrom(const GetDrivesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDrivesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grpc_services.storage.Drive drives = 1;
  int drives_size() const;
  void clear_drives();
  static const int kDrivesFieldNumber = 1;
  const ::grpc_services::storage::Drive& drives(int index) const;
  ::grpc_services::storage::Drive* mutable_drives(int index);
  ::grpc_services::storage::Drive* add_drives();
  ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Drive >*
      mutable_drives();
  const ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Drive >&
      drives() const;

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetDrivesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Drive > drives_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetDrivesResponseImpl();
};
// -------------------------------------------------------------------

class GetItemRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetItemRequest) */ {
 public:
  GetItemRequest();
  virtual ~GetItemRequest();

  GetItemRequest(const GetItemRequest& from);

  inline GetItemRequest& operator=(const GetItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetItemRequest(GetItemRequest&& from) noexcept
    : GetItemRequest() {
    *this = ::std::move(from);
  }

  inline GetItemRequest& operator=(GetItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemRequest* internal_default_instance() {
    return reinterpret_cast<const GetItemRequest*>(
               &_GetItemRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetItemRequest* other);
  friend void swap(GetItemRequest& a, GetItemRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetItemRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetItemRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetItemRequest& from);
  void MergeFrom(const GetItemRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetItemRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetItemRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetItemRequestImpl();
};
// -------------------------------------------------------------------

class GetItemResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetItemResponse) */ {
 public:
  GetItemResponse();
  virtual ~GetItemResponse();

  GetItemResponse(const GetItemResponse& from);

  inline GetItemResponse& operator=(const GetItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetItemResponse(GetItemResponse&& from) noexcept
    : GetItemResponse() {
    *this = ::std::move(from);
  }

  inline GetItemResponse& operator=(GetItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetItemResponse* internal_default_instance() {
    return reinterpret_cast<const GetItemResponse*>(
               &_GetItemResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetItemResponse* other);
  friend void swap(GetItemResponse& a, GetItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetItemResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetItemResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetItemResponse& from);
  void MergeFrom(const GetItemResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::grpc_services::storage::Item& item() const;
  ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetItemResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Item* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetItemResponseImpl();
};
// -------------------------------------------------------------------

class GetChildrenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetChildrenRequest) */ {
 public:
  GetChildrenRequest();
  virtual ~GetChildrenRequest();

  GetChildrenRequest(const GetChildrenRequest& from);

  inline GetChildrenRequest& operator=(const GetChildrenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChildrenRequest(GetChildrenRequest&& from) noexcept
    : GetChildrenRequest() {
    *this = ::std::move(from);
  }

  inline GetChildrenRequest& operator=(GetChildrenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChildrenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenRequest* internal_default_instance() {
    return reinterpret_cast<const GetChildrenRequest*>(
               &_GetChildrenRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetChildrenRequest* other);
  friend void swap(GetChildrenRequest& a, GetChildrenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChildrenRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChildrenRequest& from);
  void MergeFrom(const GetChildrenRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChildrenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetChildrenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetChildrenRequestImpl();
};
// -------------------------------------------------------------------

class GetChildrenResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetChildrenResponse) */ {
 public:
  GetChildrenResponse();
  virtual ~GetChildrenResponse();

  GetChildrenResponse(const GetChildrenResponse& from);

  inline GetChildrenResponse& operator=(const GetChildrenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChildrenResponse(GetChildrenResponse&& from) noexcept
    : GetChildrenResponse() {
    *this = ::std::move(from);
  }

  inline GetChildrenResponse& operator=(GetChildrenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChildrenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenResponse* internal_default_instance() {
    return reinterpret_cast<const GetChildrenResponse*>(
               &_GetChildrenResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetChildrenResponse* other);
  friend void swap(GetChildrenResponse& a, GetChildrenResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChildrenResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChildrenResponse& from);
  void MergeFrom(const GetChildrenResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChildrenResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .grpc_services.storage.Item children = 3;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 3;
  const ::grpc_services::storage::Item& children(int index) const;
  ::grpc_services::storage::Item* mutable_children(int index);
  ::grpc_services::storage::Item* add_children();
  ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Item >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Item >&
      children() const;

  // uint64 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 total = 2;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::uint64 total() const;
  void set_total(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetChildrenResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Item > children_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 total_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetChildrenResponseImpl();
};
// -------------------------------------------------------------------

class GetContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentRequest) */ {
 public:
  GetContentRequest();
  virtual ~GetContentRequest();

  GetContentRequest(const GetContentRequest& from);

  inline GetContentRequest& operator=(const GetContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetContentRequest(GetContentRequest&& from) noexcept
    : GetContentRequest() {
    *this = ::std::move(from);
  }

  inline GetContentRequest& operator=(GetContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContentRequest* internal_default_instance() {
    return reinterpret_cast<const GetContentRequest*>(
               &_GetContentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetContentRequest* other);
  friend void swap(GetContentRequest& a, GetContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContentRequest& from);
  void MergeFrom(const GetContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetContentRequestImpl();
};
// -------------------------------------------------------------------

class GetContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentResponse) */ {
 public:
  GetContentResponse();
  virtual ~GetContentResponse();

  GetContentResponse(const GetContentResponse& from);

  inline GetContentResponse& operator=(const GetContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetContentResponse(GetContentResponse&& from) noexcept
    : GetContentResponse() {
    *this = ::std::move(from);
  }

  inline GetContentResponse& operator=(GetContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContentResponse* internal_default_instance() {
    return reinterpret_cast<const GetContentResponse*>(
               &_GetContentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetContentResponse* other);
  friend void swap(GetContentResponse& a, GetContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContentResponse& from);
  void MergeFrom(const GetContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // uint64 total_size = 3;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 3;
  ::google::protobuf::uint64 total_size() const;
  void set_total_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::uint64 total_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetContentResponseImpl();
};
// -------------------------------------------------------------------

class GetContentStreamRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentStreamRequest) */ {
 public:
  GetContentStreamRequest();
  virtual ~GetContentStreamRequest();

  GetContentStreamRequest(const GetContentStreamRequest& from);

  inline GetContentStreamRequest& operator=(const GetContentStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetContentStreamRequest(GetContentStreamRequest&& from) noexcept
    : GetContentStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetContentStreamRequest& operator=(GetContentStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContentStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContentStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetContentStreamRequest*>(
               &_GetContentStreamRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetContentStreamRequest* other);
  friend void swap(GetContentStreamRequest& a, GetContentStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetContentStreamRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContentStreamRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContentStreamRequest& from);
  void MergeFrom(const GetContentStreamRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContentStreamRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentStreamRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetContentStreamRequestImpl();
};
// -------------------------------------------------------------------

class GetContentStreamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.GetContentStreamResponse) */ {
 public:
  GetContentStreamResponse();
  virtual ~GetContentStreamResponse();

  GetContentStreamResponse(const GetContentStreamResponse& from);

  inline GetContentStreamResponse& operator=(const GetContentStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetContentStreamResponse(GetContentStreamResponse&& from) noexcept
    : GetContentStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetContentStreamResponse& operator=(GetContentStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContentStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetContentStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetContentStreamResponse*>(
               &_GetContentStreamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetContentStreamResponse* other);
  friend void swap(GetContentStreamResponse& a, GetContentStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetContentStreamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContentStreamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContentStreamResponse& from);
  void MergeFrom(const GetContentStreamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContentStreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // uint64 total_size = 3;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 3;
  ::google::protobuf::uint64 total_size() const;
  void set_total_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.GetContentStreamResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::uint64 total_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsGetContentStreamResponseImpl();
};
// -------------------------------------------------------------------

class CreateDriveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateDriveRequest) */ {
 public:
  CreateDriveRequest();
  virtual ~CreateDriveRequest();

  CreateDriveRequest(const CreateDriveRequest& from);

  inline CreateDriveRequest& operator=(const CreateDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDriveRequest(CreateDriveRequest&& from) noexcept
    : CreateDriveRequest() {
    *this = ::std::move(from);
  }

  inline CreateDriveRequest& operator=(CreateDriveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDriveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDriveRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDriveRequest*>(
               &_CreateDriveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CreateDriveRequest* other);
  friend void swap(CreateDriveRequest& a, CreateDriveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDriveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDriveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateDriveRequest& from);
  void MergeFrom(const CreateDriveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateDriveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateDriveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsCreateDriveRequestImpl();
};
// -------------------------------------------------------------------

class CreateDriveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateDriveResponse) */ {
 public:
  CreateDriveResponse();
  virtual ~CreateDriveResponse();

  CreateDriveResponse(const CreateDriveResponse& from);

  inline CreateDriveResponse& operator=(const CreateDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDriveResponse(CreateDriveResponse&& from) noexcept
    : CreateDriveResponse() {
    *this = ::std::move(from);
  }

  inline CreateDriveResponse& operator=(CreateDriveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDriveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDriveResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDriveResponse*>(
               &_CreateDriveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CreateDriveResponse* other);
  friend void swap(CreateDriveResponse& a, CreateDriveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDriveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDriveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateDriveResponse& from);
  void MergeFrom(const CreateDriveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateDriveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 1;
  const ::grpc_services::storage::Drive& drive() const;
  ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateDriveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Drive* drive_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsCreateDriveResponseImpl();
};
// -------------------------------------------------------------------

class CreateItemRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateItemRequest) */ {
 public:
  CreateItemRequest();
  virtual ~CreateItemRequest();

  CreateItemRequest(const CreateItemRequest& from);

  inline CreateItemRequest& operator=(const CreateItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateItemRequest(CreateItemRequest&& from) noexcept
    : CreateItemRequest() {
    *this = ::std::move(from);
  }

  inline CreateItemRequest& operator=(CreateItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateItemRequest* internal_default_instance() {
    return reinterpret_cast<const CreateItemRequest*>(
               &_CreateItemRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CreateItemRequest* other);
  friend void swap(CreateItemRequest& a, CreateItemRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateItemRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateItemRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateItemRequest& from);
  void MergeFrom(const CreateItemRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateItemRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string parent_id = 4;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 4;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_id(::std::string&& value);
  #endif
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateItemRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsCreateItemRequestImpl();
};
// -------------------------------------------------------------------

class CreateItemResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.CreateItemResponse) */ {
 public:
  CreateItemResponse();
  virtual ~CreateItemResponse();

  CreateItemResponse(const CreateItemResponse& from);

  inline CreateItemResponse& operator=(const CreateItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateItemResponse(CreateItemResponse&& from) noexcept
    : CreateItemResponse() {
    *this = ::std::move(from);
  }

  inline CreateItemResponse& operator=(CreateItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateItemResponse* internal_default_instance() {
    return reinterpret_cast<const CreateItemResponse*>(
               &_CreateItemResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CreateItemResponse* other);
  friend void swap(CreateItemResponse& a, CreateItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateItemResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateItemResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateItemResponse& from);
  void MergeFrom(const CreateItemResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::grpc_services::storage::Item& item() const;
  ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.CreateItemResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Item* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsCreateItemResponseImpl();
};
// -------------------------------------------------------------------

class PutContentStreamRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.PutContentStreamRequest) */ {
 public:
  PutContentStreamRequest();
  virtual ~PutContentStreamRequest();

  PutContentStreamRequest(const PutContentStreamRequest& from);

  inline PutContentStreamRequest& operator=(const PutContentStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutContentStreamRequest(PutContentStreamRequest&& from) noexcept
    : PutContentStreamRequest() {
    *this = ::std::move(from);
  }

  inline PutContentStreamRequest& operator=(PutContentStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutContentStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutContentStreamRequest* internal_default_instance() {
    return reinterpret_cast<const PutContentStreamRequest*>(
               &_PutContentStreamRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(PutContentStreamRequest* other);
  friend void swap(PutContentStreamRequest& a, PutContentStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutContentStreamRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PutContentStreamRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutContentStreamRequest& from);
  void MergeFrom(const PutContentStreamRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutContentStreamRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // bytes content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.PutContentStreamRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 offset_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsPutContentStreamRequestImpl();
};
// -------------------------------------------------------------------

class PutContentStreamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.PutContentStreamResponse) */ {
 public:
  PutContentStreamResponse();
  virtual ~PutContentStreamResponse();

  PutContentStreamResponse(const PutContentStreamResponse& from);

  inline PutContentStreamResponse& operator=(const PutContentStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutContentStreamResponse(PutContentStreamResponse&& from) noexcept
    : PutContentStreamResponse() {
    *this = ::std::move(from);
  }

  inline PutContentStreamResponse& operator=(PutContentStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutContentStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutContentStreamResponse* internal_default_instance() {
    return reinterpret_cast<const PutContentStreamResponse*>(
               &_PutContentStreamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(PutContentStreamResponse* other);
  friend void swap(PutContentStreamResponse& a, PutContentStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutContentStreamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PutContentStreamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutContentStreamResponse& from);
  void MergeFrom(const PutContentStreamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutContentStreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::grpc_services::storage::Item& item() const;
  ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.PutContentStreamResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Item* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsPutContentStreamResponseImpl();
};
// -------------------------------------------------------------------

class TruncateContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.TruncateContentRequest) */ {
 public:
  TruncateContentRequest();
  virtual ~TruncateContentRequest();

  TruncateContentRequest(const TruncateContentRequest& from);

  inline TruncateContentRequest& operator=(const TruncateContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncateContentRequest(TruncateContentRequest&& from) noexcept
    : TruncateContentRequest() {
    *this = ::std::move(from);
  }

  inline TruncateContentRequest& operator=(TruncateContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncateContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateContentRequest* internal_default_instance() {
    return reinterpret_cast<const TruncateContentRequest*>(
               &_TruncateContentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TruncateContentRequest* other);
  friend void swap(TruncateContentRequest& a, TruncateContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncateContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TruncateContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TruncateContentRequest& from);
  void MergeFrom(const TruncateContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TruncateContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // uint64 new_length = 3;
  void clear_new_length();
  static const int kNewLengthFieldNumber = 3;
  ::google::protobuf::uint64 new_length() const;
  void set_new_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.TruncateContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::uint64 new_length_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsTruncateContentRequestImpl();
};
// -------------------------------------------------------------------

class TruncateContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.TruncateContentResponse) */ {
 public:
  TruncateContentResponse();
  virtual ~TruncateContentResponse();

  TruncateContentResponse(const TruncateContentResponse& from);

  inline TruncateContentResponse& operator=(const TruncateContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncateContentResponse(TruncateContentResponse&& from) noexcept
    : TruncateContentResponse() {
    *this = ::std::move(from);
  }

  inline TruncateContentResponse& operator=(TruncateContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncateContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncateContentResponse* internal_default_instance() {
    return reinterpret_cast<const TruncateContentResponse*>(
               &_TruncateContentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(TruncateContentResponse* other);
  friend void swap(TruncateContentResponse& a, TruncateContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncateContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TruncateContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TruncateContentResponse& from);
  void MergeFrom(const TruncateContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TruncateContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::grpc_services::storage::Item& item() const;
  ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.TruncateContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Item* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsTruncateContentResponseImpl();
};
// -------------------------------------------------------------------

class UpdateDriveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateDriveRequest) */ {
 public:
  UpdateDriveRequest();
  virtual ~UpdateDriveRequest();

  UpdateDriveRequest(const UpdateDriveRequest& from);

  inline UpdateDriveRequest& operator=(const UpdateDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDriveRequest(UpdateDriveRequest&& from) noexcept
    : UpdateDriveRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDriveRequest& operator=(UpdateDriveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDriveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDriveRequest*>(
               &_UpdateDriveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(UpdateDriveRequest* other);
  friend void swap(UpdateDriveRequest& a, UpdateDriveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDriveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriveRequest& from);
  void MergeFrom(const UpdateDriveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 1;
  const ::grpc_services::storage::Drive& drive() const;
  ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateDriveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Drive* drive_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsUpdateDriveRequestImpl();
};
// -------------------------------------------------------------------

class UpdateDriveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateDriveResponse) */ {
 public:
  UpdateDriveResponse();
  virtual ~UpdateDriveResponse();

  UpdateDriveResponse(const UpdateDriveResponse& from);

  inline UpdateDriveResponse& operator=(const UpdateDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDriveResponse(UpdateDriveResponse&& from) noexcept
    : UpdateDriveResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDriveResponse& operator=(UpdateDriveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDriveResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDriveResponse*>(
               &_UpdateDriveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(UpdateDriveResponse* other);
  friend void swap(UpdateDriveResponse& a, UpdateDriveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDriveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriveResponse& from);
  void MergeFrom(const UpdateDriveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Drive drive = 1;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 1;
  const ::grpc_services::storage::Drive& drive() const;
  ::grpc_services::storage::Drive* release_drive();
  ::grpc_services::storage::Drive* mutable_drive();
  void set_allocated_drive(::grpc_services::storage::Drive* drive);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateDriveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Drive* drive_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsUpdateDriveResponseImpl();
};
// -------------------------------------------------------------------

class UpdateItemRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateItemRequest) */ {
 public:
  UpdateItemRequest();
  virtual ~UpdateItemRequest();

  UpdateItemRequest(const UpdateItemRequest& from);

  inline UpdateItemRequest& operator=(const UpdateItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateItemRequest(UpdateItemRequest&& from) noexcept
    : UpdateItemRequest() {
    *this = ::std::move(from);
  }

  inline UpdateItemRequest& operator=(UpdateItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateItemRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateItemRequest*>(
               &_UpdateItemRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(UpdateItemRequest* other);
  friend void swap(UpdateItemRequest& a, UpdateItemRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateItemRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateItemRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateItemRequest& from);
  void MergeFrom(const UpdateItemRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateItemRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::grpc_services::storage::Item& item() const;
  ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateItemRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Item* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsUpdateItemRequestImpl();
};
// -------------------------------------------------------------------

class UpdateItemResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.UpdateItemResponse) */ {
 public:
  UpdateItemResponse();
  virtual ~UpdateItemResponse();

  UpdateItemResponse(const UpdateItemResponse& from);

  inline UpdateItemResponse& operator=(const UpdateItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateItemResponse(UpdateItemResponse&& from) noexcept
    : UpdateItemResponse() {
    *this = ::std::move(from);
  }

  inline UpdateItemResponse& operator=(UpdateItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateItemResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateItemResponse*>(
               &_UpdateItemResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(UpdateItemResponse* other);
  friend void swap(UpdateItemResponse& a, UpdateItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateItemResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateItemResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateItemResponse& from);
  void MergeFrom(const UpdateItemResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.Item item = 1;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::grpc_services::storage::Item& item() const;
  ::grpc_services::storage::Item* release_item();
  ::grpc_services::storage::Item* mutable_item();
  void set_allocated_item(::grpc_services::storage::Item* item);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.UpdateItemResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::grpc_services::storage::Item* item_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsUpdateItemResponseImpl();
};
// -------------------------------------------------------------------

class RemoveDriveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveDriveRequest) */ {
 public:
  RemoveDriveRequest();
  virtual ~RemoveDriveRequest();

  RemoveDriveRequest(const RemoveDriveRequest& from);

  inline RemoveDriveRequest& operator=(const RemoveDriveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveDriveRequest(RemoveDriveRequest&& from) noexcept
    : RemoveDriveRequest() {
    *this = ::std::move(from);
  }

  inline RemoveDriveRequest& operator=(RemoveDriveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveDriveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveDriveRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveDriveRequest*>(
               &_RemoveDriveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(RemoveDriveRequest* other);
  friend void swap(RemoveDriveRequest& a, RemoveDriveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveDriveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveDriveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveDriveRequest& from);
  void MergeFrom(const RemoveDriveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveDriveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveDriveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsRemoveDriveRequestImpl();
};
// -------------------------------------------------------------------

class RemoveDriveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveDriveResponse) */ {
 public:
  RemoveDriveResponse();
  virtual ~RemoveDriveResponse();

  RemoveDriveResponse(const RemoveDriveResponse& from);

  inline RemoveDriveResponse& operator=(const RemoveDriveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveDriveResponse(RemoveDriveResponse&& from) noexcept
    : RemoveDriveResponse() {
    *this = ::std::move(from);
  }

  inline RemoveDriveResponse& operator=(RemoveDriveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveDriveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveDriveResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveDriveResponse*>(
               &_RemoveDriveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(RemoveDriveResponse* other);
  friend void swap(RemoveDriveResponse& a, RemoveDriveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveDriveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveDriveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveDriveResponse& from);
  void MergeFrom(const RemoveDriveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveDriveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveDriveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsRemoveDriveResponseImpl();
};
// -------------------------------------------------------------------

class RemoveItemRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveItemRequest) */ {
 public:
  RemoveItemRequest();
  virtual ~RemoveItemRequest();

  RemoveItemRequest(const RemoveItemRequest& from);

  inline RemoveItemRequest& operator=(const RemoveItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveItemRequest(RemoveItemRequest&& from) noexcept
    : RemoveItemRequest() {
    *this = ::std::move(from);
  }

  inline RemoveItemRequest& operator=(RemoveItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveItemRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveItemRequest*>(
               &_RemoveItemRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(RemoveItemRequest* other);
  friend void swap(RemoveItemRequest& a, RemoveItemRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveItemRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveItemRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveItemRequest& from);
  void MergeFrom(const RemoveItemRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveItemRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // string item_id = 2;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveItemRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsRemoveItemRequestImpl();
};
// -------------------------------------------------------------------

class RemoveItemResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.RemoveItemResponse) */ {
 public:
  RemoveItemResponse();
  virtual ~RemoveItemResponse();

  RemoveItemResponse(const RemoveItemResponse& from);

  inline RemoveItemResponse& operator=(const RemoveItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveItemResponse(RemoveItemResponse&& from) noexcept
    : RemoveItemResponse() {
    *this = ::std::move(from);
  }

  inline RemoveItemResponse& operator=(RemoveItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveItemResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveItemResponse*>(
               &_RemoveItemResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(RemoveItemResponse* other);
  friend void swap(RemoveItemResponse& a, RemoveItemResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveItemResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveItemResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveItemResponse& from);
  void MergeFrom(const RemoveItemResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveItemResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grpc_services.storage.RemoveItemResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsRemoveItemResponseImpl();
};
// -------------------------------------------------------------------

class WatchChangesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.WatchChangesRequest) */ {
 public:
  WatchChangesRequest();
  virtual ~WatchChangesRequest();

  WatchChangesRequest(const WatchChangesRequest& from);

  inline WatchChangesRequest& operator=(const WatchChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchChangesRequest(WatchChangesRequest&& from) noexcept
    : WatchChangesRequest() {
    *this = ::std::move(from);
  }

  inline WatchChangesRequest& operator=(WatchChangesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WatchChangesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchChangesRequest* internal_default_instance() {
    return reinterpret_cast<const WatchChangesRequest*>(
               &_WatchChangesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(WatchChangesRequest* other);
  friend void swap(WatchChangesRequest& a, WatchChangesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchChangesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WatchChangesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WatchChangesRequest& from);
  void MergeFrom(const WatchChangesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WatchChangesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string drive_id = 1;
  void clear_drive_id();
  static const int kDriveIdFieldNumber = 1;
  const ::std::string& drive_id() const;
  void set_drive_id(const ::std::string& value);
  #if LANG_CXX11
  void set_drive_id(::std::string&& value);
  #endif
  void set_drive_id(const char* value);
  void set_drive_id(const char* value, size_t size);
  ::std::string* mutable_drive_id();
  ::std::string* release_drive_id();
  void set_allocated_drive_id(::std::string* drive_id);

  // @@protoc_insertion_point(class_scope:grpc_services.storage.WatchChangesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr drive_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsWatchChangesRequestImpl();
};
// -------------------------------------------------------------------

class WatchChangesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_services.storage.WatchChangesResponse) */ {
 public:
  WatchChangesResponse();
  virtual ~WatchChangesResponse();

  WatchChangesResponse(const WatchChangesResponse& from);

  inline WatchChangesResponse& operator=(const WatchChangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchChangesResponse(WatchChangesResponse&& from) noexcept
    : WatchChangesResponse() {
    *this = ::std::move(from);
  }

  inline WatchChangesResponse& operator=(WatchChangesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WatchChangesResponse& default_instance();

  enum TestEventCase {
    kCreated = 1,
    kRemoved = 2,
    kUpdated = 3,
    TEST_EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchChangesResponse* internal_default_instance() {
    return reinterpret_cast<const WatchChangesResponse*>(
               &_WatchChangesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(WatchChangesResponse* other);
  friend void swap(WatchChangesResponse& a, WatchChangesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchChangesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WatchChangesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WatchChangesResponse& from);
  void MergeFrom(const WatchChangesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WatchChangesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .grpc_services.storage.ItemCreatedEvent created = 1;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 1;
  const ::grpc_services::storage::ItemCreatedEvent& created() const;
  ::grpc_services::storage::ItemCreatedEvent* release_created();
  ::grpc_services::storage::ItemCreatedEvent* mutable_created();
  void set_allocated_created(::grpc_services::storage::ItemCreatedEvent* created);

  // .grpc_services.storage.ItemRemovedEvent removed = 2;
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 2;
  const ::grpc_services::storage::ItemRemovedEvent& removed() const;
  ::grpc_services::storage::ItemRemovedEvent* release_removed();
  ::grpc_services::storage::ItemRemovedEvent* mutable_removed();
  void set_allocated_removed(::grpc_services::storage::ItemRemovedEvent* removed);

  // .grpc_services.storage.ItemContentUpdatedEvent updated = 3;
  bool has_updated() const;
  void clear_updated();
  static const int kUpdatedFieldNumber = 3;
  const ::grpc_services::storage::ItemContentUpdatedEvent& updated() const;
  ::grpc_services::storage::ItemContentUpdatedEvent* release_updated();
  ::grpc_services::storage::ItemContentUpdatedEvent* mutable_updated();
  void set_allocated_updated(::grpc_services::storage::ItemContentUpdatedEvent* updated);

  TestEventCase test_event_case() const;
  // @@protoc_insertion_point(class_scope:grpc_services.storage.WatchChangesResponse)
 private:
  void set_has_created();
  void set_has_removed();
  void set_has_updated();

  inline bool has_test_event() const;
  void clear_test_event();
  inline void clear_has_test_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TestEventUnion {
    TestEventUnion() {}
    ::grpc_services::storage::ItemCreatedEvent* created_;
    ::grpc_services::storage::ItemRemovedEvent* removed_;
    ::grpc_services::storage::ItemContentUpdatedEvent* updated_;
  } test_event_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_storage_2fstorage_2eproto::TableStruct;
  friend void ::protobuf_storage_2fstorage_2eproto::InitDefaultsWatchChangesResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDriveRequest

// string drive_id = 1;
inline void GetDriveRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDriveRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetDriveRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void GetDriveRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetDriveRequest.drive_id)
}
#if LANG_CXX11
inline void GetDriveRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetDriveRequest.drive_id)
}
#endif
inline void GetDriveRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetDriveRequest.drive_id)
}
inline void GetDriveRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetDriveRequest.drive_id)
}
inline ::std::string* GetDriveRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetDriveRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDriveRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetDriveRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDriveRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetDriveRequest.drive_id)
}

// -------------------------------------------------------------------

// GetDriveResponse

// .grpc_services.storage.Drive drive = 1;
inline bool GetDriveResponse::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
inline const ::grpc_services::storage::Drive& GetDriveResponse::drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetDriveResponse.drive)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Drive*>(
      &::grpc_services::storage::_Drive_default_instance_);
}
inline ::grpc_services::storage::Drive* GetDriveResponse::release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetDriveResponse.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Drive* GetDriveResponse::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::grpc_services::storage::Drive;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetDriveResponse.drive)
  return drive_;
}
inline void GetDriveResponse::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drive_);
  }
  if (drive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetDriveResponse.drive)
}

// -------------------------------------------------------------------

// GetDrivesRequest

// -------------------------------------------------------------------

// GetDrivesResponse

// repeated .grpc_services.storage.Drive drives = 1;
inline int GetDrivesResponse::drives_size() const {
  return drives_.size();
}
inline const ::grpc_services::storage::Drive& GetDrivesResponse::drives(int index) const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetDrivesResponse.drives)
  return drives_.Get(index);
}
inline ::grpc_services::storage::Drive* GetDrivesResponse::mutable_drives(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetDrivesResponse.drives)
  return drives_.Mutable(index);
}
inline ::grpc_services::storage::Drive* GetDrivesResponse::add_drives() {
  // @@protoc_insertion_point(field_add:grpc_services.storage.GetDrivesResponse.drives)
  return drives_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Drive >*
GetDrivesResponse::mutable_drives() {
  // @@protoc_insertion_point(field_mutable_list:grpc_services.storage.GetDrivesResponse.drives)
  return &drives_;
}
inline const ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Drive >&
GetDrivesResponse::drives() const {
  // @@protoc_insertion_point(field_list:grpc_services.storage.GetDrivesResponse.drives)
  return drives_;
}

// -------------------------------------------------------------------

// GetItemRequest

// string drive_id = 1;
inline void GetItemRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetItemRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetItemRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void GetItemRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetItemRequest.drive_id)
}
#if LANG_CXX11
inline void GetItemRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetItemRequest.drive_id)
}
#endif
inline void GetItemRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetItemRequest.drive_id)
}
inline void GetItemRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetItemRequest.drive_id)
}
inline ::std::string* GetItemRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetItemRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetItemRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetItemRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetItemRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetItemRequest.drive_id)
}

// string item_id = 2;
inline void GetItemRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetItemRequest.item_id)
  return item_id_.GetNoArena();
}
inline void GetItemRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetItemRequest.item_id)
}
#if LANG_CXX11
inline void GetItemRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetItemRequest.item_id)
}
#endif
inline void GetItemRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetItemRequest.item_id)
}
inline void GetItemRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetItemRequest.item_id)
}
inline ::std::string* GetItemRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetItemRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetItemRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetItemRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetItemRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetItemRequest.item_id)
}

// -------------------------------------------------------------------

// GetItemResponse

// .grpc_services.storage.Item item = 1;
inline bool GetItemResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline const ::grpc_services::storage::Item& GetItemResponse::item() const {
  const ::grpc_services::storage::Item* p = item_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetItemResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Item*>(
      &::grpc_services::storage::_Item_default_instance_);
}
inline ::grpc_services::storage::Item* GetItemResponse::release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetItemResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Item* GetItemResponse::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::grpc_services::storage::Item;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetItemResponse.item)
  return item_;
}
inline void GetItemResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_);
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetItemResponse.item)
}

// -------------------------------------------------------------------

// GetChildrenRequest

// string drive_id = 1;
inline void GetChildrenRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChildrenRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void GetChildrenRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.drive_id)
}
#if LANG_CXX11
inline void GetChildrenRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetChildrenRequest.drive_id)
}
#endif
inline void GetChildrenRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetChildrenRequest.drive_id)
}
inline void GetChildrenRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetChildrenRequest.drive_id)
}
inline ::std::string* GetChildrenRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetChildrenRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChildrenRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetChildrenRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChildrenRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetChildrenRequest.drive_id)
}

// string item_id = 2;
inline void GetChildrenRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetChildrenRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.item_id)
  return item_id_.GetNoArena();
}
inline void GetChildrenRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.item_id)
}
#if LANG_CXX11
inline void GetChildrenRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetChildrenRequest.item_id)
}
#endif
inline void GetChildrenRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetChildrenRequest.item_id)
}
inline void GetChildrenRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetChildrenRequest.item_id)
}
inline ::std::string* GetChildrenRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetChildrenRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChildrenRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetChildrenRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChildrenRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetChildrenRequest.item_id)
}

// uint64 offset = 3;
inline void GetChildrenRequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetChildrenRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.offset)
  return offset_;
}
inline void GetChildrenRequest::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.offset)
}

// uint64 count = 4;
inline void GetChildrenRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetChildrenRequest::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenRequest.count)
  return count_;
}
inline void GetChildrenRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenRequest.count)
}

// -------------------------------------------------------------------

// GetChildrenResponse

// uint64 offset = 1;
inline void GetChildrenResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetChildrenResponse::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenResponse.offset)
  return offset_;
}
inline void GetChildrenResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenResponse.offset)
}

// uint64 total = 2;
inline void GetChildrenResponse::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetChildrenResponse::total() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenResponse.total)
  return total_;
}
inline void GetChildrenResponse::set_total(::google::protobuf::uint64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetChildrenResponse.total)
}

// repeated .grpc_services.storage.Item children = 3;
inline int GetChildrenResponse::children_size() const {
  return children_.size();
}
inline const ::grpc_services::storage::Item& GetChildrenResponse::children(int index) const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetChildrenResponse.children)
  return children_.Get(index);
}
inline ::grpc_services::storage::Item* GetChildrenResponse::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetChildrenResponse.children)
  return children_.Mutable(index);
}
inline ::grpc_services::storage::Item* GetChildrenResponse::add_children() {
  // @@protoc_insertion_point(field_add:grpc_services.storage.GetChildrenResponse.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Item >*
GetChildrenResponse::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:grpc_services.storage.GetChildrenResponse.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::grpc_services::storage::Item >&
GetChildrenResponse::children() const {
  // @@protoc_insertion_point(field_list:grpc_services.storage.GetChildrenResponse.children)
  return children_;
}

// -------------------------------------------------------------------

// GetContentRequest

// string drive_id = 1;
inline void GetContentRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetContentRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void GetContentRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.drive_id)
}
#if LANG_CXX11
inline void GetContentRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetContentRequest.drive_id)
}
#endif
inline void GetContentRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetContentRequest.drive_id)
}
inline void GetContentRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetContentRequest.drive_id)
}
inline ::std::string* GetContentRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetContentRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentRequest.drive_id)
}

// string item_id = 2;
inline void GetContentRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetContentRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.item_id)
  return item_id_.GetNoArena();
}
inline void GetContentRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.item_id)
}
#if LANG_CXX11
inline void GetContentRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetContentRequest.item_id)
}
#endif
inline void GetContentRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetContentRequest.item_id)
}
inline void GetContentRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetContentRequest.item_id)
}
inline ::std::string* GetContentRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetContentRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentRequest.item_id)
}

// uint64 offset = 3;
inline void GetContentRequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.offset)
  return offset_;
}
inline void GetContentRequest::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.offset)
}

// uint64 count = 4;
inline void GetContentRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentRequest::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentRequest.count)
  return count_;
}
inline void GetContentRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentRequest.count)
}

// -------------------------------------------------------------------

// GetContentResponse

// uint64 offset = 1;
inline void GetContentResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentResponse::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.offset)
  return offset_;
}
inline void GetContentResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.offset)
}

// uint64 count = 2;
inline void GetContentResponse::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentResponse::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.count)
  return count_;
}
inline void GetContentResponse::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.count)
}

// uint64 total_size = 3;
inline void GetContentResponse::clear_total_size() {
  total_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentResponse::total_size() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.total_size)
  return total_size_;
}
inline void GetContentResponse::set_total_size(::google::protobuf::uint64 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.total_size)
}

// bytes content = 4;
inline void GetContentResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetContentResponse::content() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentResponse.content)
  return content_.GetNoArena();
}
inline void GetContentResponse::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentResponse.content)
}
#if LANG_CXX11
inline void GetContentResponse::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetContentResponse.content)
}
#endif
inline void GetContentResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetContentResponse.content)
}
inline void GetContentResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetContentResponse.content)
}
inline ::std::string* GetContentResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetContentResponse::release_content() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentResponse.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentResponse.content)
}

// -------------------------------------------------------------------

// GetContentStreamRequest

// string drive_id = 1;
inline void GetContentStreamRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetContentStreamRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void GetContentStreamRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.drive_id)
}
#if LANG_CXX11
inline void GetContentStreamRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetContentStreamRequest.drive_id)
}
#endif
inline void GetContentStreamRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetContentStreamRequest.drive_id)
}
inline void GetContentStreamRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetContentStreamRequest.drive_id)
}
inline ::std::string* GetContentStreamRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentStreamRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetContentStreamRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentStreamRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentStreamRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentStreamRequest.drive_id)
}

// string item_id = 2;
inline void GetContentStreamRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetContentStreamRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.item_id)
  return item_id_.GetNoArena();
}
inline void GetContentStreamRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.item_id)
}
#if LANG_CXX11
inline void GetContentStreamRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetContentStreamRequest.item_id)
}
#endif
inline void GetContentStreamRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetContentStreamRequest.item_id)
}
inline void GetContentStreamRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetContentStreamRequest.item_id)
}
inline ::std::string* GetContentStreamRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentStreamRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetContentStreamRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentStreamRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentStreamRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentStreamRequest.item_id)
}

// uint64 offset = 3;
inline void GetContentStreamRequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentStreamRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.offset)
  return offset_;
}
inline void GetContentStreamRequest::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.offset)
}

// uint64 count = 4;
inline void GetContentStreamRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentStreamRequest::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamRequest.count)
  return count_;
}
inline void GetContentStreamRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamRequest.count)
}

// -------------------------------------------------------------------

// GetContentStreamResponse

// uint64 offset = 1;
inline void GetContentStreamResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentStreamResponse::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.offset)
  return offset_;
}
inline void GetContentStreamResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.offset)
}

// uint64 count = 2;
inline void GetContentStreamResponse::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentStreamResponse::count() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.count)
  return count_;
}
inline void GetContentStreamResponse::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.count)
}

// uint64 total_size = 3;
inline void GetContentStreamResponse::clear_total_size() {
  total_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetContentStreamResponse::total_size() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.total_size)
  return total_size_;
}
inline void GetContentStreamResponse::set_total_size(::google::protobuf::uint64 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.total_size)
}

// bytes content = 4;
inline void GetContentStreamResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetContentStreamResponse::content() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.GetContentStreamResponse.content)
  return content_.GetNoArena();
}
inline void GetContentStreamResponse::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.GetContentStreamResponse.content)
}
#if LANG_CXX11
inline void GetContentStreamResponse::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.GetContentStreamResponse.content)
}
#endif
inline void GetContentStreamResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.GetContentStreamResponse.content)
}
inline void GetContentStreamResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.GetContentStreamResponse.content)
}
inline ::std::string* GetContentStreamResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.GetContentStreamResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetContentStreamResponse::release_content() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.GetContentStreamResponse.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetContentStreamResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.GetContentStreamResponse.content)
}

// -------------------------------------------------------------------

// CreateDriveRequest

// string name = 1;
inline void CreateDriveRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDriveRequest::name() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateDriveRequest.name)
  return name_.GetNoArena();
}
inline void CreateDriveRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateDriveRequest.name)
}
#if LANG_CXX11
inline void CreateDriveRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.CreateDriveRequest.name)
}
#endif
inline void CreateDriveRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.CreateDriveRequest.name)
}
inline void CreateDriveRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.CreateDriveRequest.name)
}
inline ::std::string* CreateDriveRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateDriveRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDriveRequest::release_name() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateDriveRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDriveRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateDriveRequest.name)
}

// string description = 2;
inline void CreateDriveRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDriveRequest::description() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateDriveRequest.description)
  return description_.GetNoArena();
}
inline void CreateDriveRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateDriveRequest.description)
}
#if LANG_CXX11
inline void CreateDriveRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.CreateDriveRequest.description)
}
#endif
inline void CreateDriveRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.CreateDriveRequest.description)
}
inline void CreateDriveRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.CreateDriveRequest.description)
}
inline ::std::string* CreateDriveRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateDriveRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDriveRequest::release_description() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateDriveRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDriveRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateDriveRequest.description)
}

// -------------------------------------------------------------------

// CreateDriveResponse

// .grpc_services.storage.Drive drive = 1;
inline bool CreateDriveResponse::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
inline const ::grpc_services::storage::Drive& CreateDriveResponse::drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateDriveResponse.drive)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Drive*>(
      &::grpc_services::storage::_Drive_default_instance_);
}
inline ::grpc_services::storage::Drive* CreateDriveResponse::release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateDriveResponse.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Drive* CreateDriveResponse::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::grpc_services::storage::Drive;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateDriveResponse.drive)
  return drive_;
}
inline void CreateDriveResponse::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drive_);
  }
  if (drive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateDriveResponse.drive)
}

// -------------------------------------------------------------------

// CreateItemRequest

// string drive_id = 1;
inline void CreateItemRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateItemRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void CreateItemRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.drive_id)
}
#if LANG_CXX11
inline void CreateItemRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.CreateItemRequest.drive_id)
}
#endif
inline void CreateItemRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.CreateItemRequest.drive_id)
}
inline void CreateItemRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.CreateItemRequest.drive_id)
}
inline ::std::string* CreateItemRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateItemRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateItemRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.drive_id)
}

// string name = 2;
inline void CreateItemRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateItemRequest::name() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.name)
  return name_.GetNoArena();
}
inline void CreateItemRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.name)
}
#if LANG_CXX11
inline void CreateItemRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.CreateItemRequest.name)
}
#endif
inline void CreateItemRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.CreateItemRequest.name)
}
inline void CreateItemRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.CreateItemRequest.name)
}
inline ::std::string* CreateItemRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateItemRequest::release_name() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateItemRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.name)
}

// string description = 3;
inline void CreateItemRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateItemRequest::description() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.description)
  return description_.GetNoArena();
}
inline void CreateItemRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.description)
}
#if LANG_CXX11
inline void CreateItemRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.CreateItemRequest.description)
}
#endif
inline void CreateItemRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.CreateItemRequest.description)
}
inline void CreateItemRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.CreateItemRequest.description)
}
inline ::std::string* CreateItemRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateItemRequest::release_description() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateItemRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.description)
}

// string parent_id = 4;
inline void CreateItemRequest::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateItemRequest::parent_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemRequest.parent_id)
  return parent_id_.GetNoArena();
}
inline void CreateItemRequest::set_parent_id(const ::std::string& value) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.CreateItemRequest.parent_id)
}
#if LANG_CXX11
inline void CreateItemRequest::set_parent_id(::std::string&& value) {
  
  parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.CreateItemRequest.parent_id)
}
#endif
inline void CreateItemRequest::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.CreateItemRequest.parent_id)
}
inline void CreateItemRequest::set_parent_id(const char* value, size_t size) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.CreateItemRequest.parent_id)
}
inline ::std::string* CreateItemRequest::mutable_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemRequest.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateItemRequest::release_parent_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemRequest.parent_id)
  
  return parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateItemRequest::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    
  } else {
    
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemRequest.parent_id)
}

// -------------------------------------------------------------------

// CreateItemResponse

// .grpc_services.storage.Item item = 1;
inline bool CreateItemResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline const ::grpc_services::storage::Item& CreateItemResponse::item() const {
  const ::grpc_services::storage::Item* p = item_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.CreateItemResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Item*>(
      &::grpc_services::storage::_Item_default_instance_);
}
inline ::grpc_services::storage::Item* CreateItemResponse::release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.CreateItemResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Item* CreateItemResponse::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::grpc_services::storage::Item;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.CreateItemResponse.item)
  return item_;
}
inline void CreateItemResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_);
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.CreateItemResponse.item)
}

// -------------------------------------------------------------------

// PutContentStreamRequest

// string drive_id = 1;
inline void PutContentStreamRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutContentStreamRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void PutContentStreamRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.drive_id)
}
#if LANG_CXX11
inline void PutContentStreamRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.PutContentStreamRequest.drive_id)
}
#endif
inline void PutContentStreamRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.PutContentStreamRequest.drive_id)
}
inline void PutContentStreamRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.PutContentStreamRequest.drive_id)
}
inline ::std::string* PutContentStreamRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutContentStreamRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutContentStreamRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamRequest.drive_id)
}

// string item_id = 2;
inline void PutContentStreamRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutContentStreamRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.item_id)
  return item_id_.GetNoArena();
}
inline void PutContentStreamRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.item_id)
}
#if LANG_CXX11
inline void PutContentStreamRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.PutContentStreamRequest.item_id)
}
#endif
inline void PutContentStreamRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.PutContentStreamRequest.item_id)
}
inline void PutContentStreamRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.PutContentStreamRequest.item_id)
}
inline ::std::string* PutContentStreamRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutContentStreamRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutContentStreamRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamRequest.item_id)
}

// uint64 offset = 3;
inline void PutContentStreamRequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PutContentStreamRequest::offset() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.offset)
  return offset_;
}
inline void PutContentStreamRequest::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.offset)
}

// bytes content = 4;
inline void PutContentStreamRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutContentStreamRequest::content() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamRequest.content)
  return content_.GetNoArena();
}
inline void PutContentStreamRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.PutContentStreamRequest.content)
}
#if LANG_CXX11
inline void PutContentStreamRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.PutContentStreamRequest.content)
}
#endif
inline void PutContentStreamRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.PutContentStreamRequest.content)
}
inline void PutContentStreamRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.PutContentStreamRequest.content)
}
inline ::std::string* PutContentStreamRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutContentStreamRequest::release_content() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutContentStreamRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamRequest.content)
}

// -------------------------------------------------------------------

// PutContentStreamResponse

// .grpc_services.storage.Item item = 1;
inline bool PutContentStreamResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline const ::grpc_services::storage::Item& PutContentStreamResponse::item() const {
  const ::grpc_services::storage::Item* p = item_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.PutContentStreamResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Item*>(
      &::grpc_services::storage::_Item_default_instance_);
}
inline ::grpc_services::storage::Item* PutContentStreamResponse::release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.PutContentStreamResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Item* PutContentStreamResponse::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::grpc_services::storage::Item;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.PutContentStreamResponse.item)
  return item_;
}
inline void PutContentStreamResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_);
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.PutContentStreamResponse.item)
}

// -------------------------------------------------------------------

// TruncateContentRequest

// string drive_id = 1;
inline void TruncateContentRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TruncateContentRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void TruncateContentRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.TruncateContentRequest.drive_id)
}
#if LANG_CXX11
inline void TruncateContentRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.TruncateContentRequest.drive_id)
}
#endif
inline void TruncateContentRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.TruncateContentRequest.drive_id)
}
inline void TruncateContentRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.TruncateContentRequest.drive_id)
}
inline ::std::string* TruncateContentRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.TruncateContentRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TruncateContentRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.TruncateContentRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateContentRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.TruncateContentRequest.drive_id)
}

// string item_id = 2;
inline void TruncateContentRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TruncateContentRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentRequest.item_id)
  return item_id_.GetNoArena();
}
inline void TruncateContentRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.TruncateContentRequest.item_id)
}
#if LANG_CXX11
inline void TruncateContentRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.TruncateContentRequest.item_id)
}
#endif
inline void TruncateContentRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.TruncateContentRequest.item_id)
}
inline void TruncateContentRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.TruncateContentRequest.item_id)
}
inline ::std::string* TruncateContentRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.TruncateContentRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TruncateContentRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.TruncateContentRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TruncateContentRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.TruncateContentRequest.item_id)
}

// uint64 new_length = 3;
inline void TruncateContentRequest::clear_new_length() {
  new_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TruncateContentRequest::new_length() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentRequest.new_length)
  return new_length_;
}
inline void TruncateContentRequest::set_new_length(::google::protobuf::uint64 value) {
  
  new_length_ = value;
  // @@protoc_insertion_point(field_set:grpc_services.storage.TruncateContentRequest.new_length)
}

// -------------------------------------------------------------------

// TruncateContentResponse

// .grpc_services.storage.Item item = 1;
inline bool TruncateContentResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline const ::grpc_services::storage::Item& TruncateContentResponse::item() const {
  const ::grpc_services::storage::Item* p = item_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.TruncateContentResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Item*>(
      &::grpc_services::storage::_Item_default_instance_);
}
inline ::grpc_services::storage::Item* TruncateContentResponse::release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.TruncateContentResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Item* TruncateContentResponse::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::grpc_services::storage::Item;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.TruncateContentResponse.item)
  return item_;
}
inline void TruncateContentResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_);
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.TruncateContentResponse.item)
}

// -------------------------------------------------------------------

// UpdateDriveRequest

// .grpc_services.storage.Drive drive = 1;
inline bool UpdateDriveRequest::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
inline const ::grpc_services::storage::Drive& UpdateDriveRequest::drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateDriveRequest.drive)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Drive*>(
      &::grpc_services::storage::_Drive_default_instance_);
}
inline ::grpc_services::storage::Drive* UpdateDriveRequest::release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateDriveRequest.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Drive* UpdateDriveRequest::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::grpc_services::storage::Drive;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateDriveRequest.drive)
  return drive_;
}
inline void UpdateDriveRequest::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drive_);
  }
  if (drive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateDriveRequest.drive)
}

// -------------------------------------------------------------------

// UpdateDriveResponse

// .grpc_services.storage.Drive drive = 1;
inline bool UpdateDriveResponse::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
inline const ::grpc_services::storage::Drive& UpdateDriveResponse::drive() const {
  const ::grpc_services::storage::Drive* p = drive_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateDriveResponse.drive)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Drive*>(
      &::grpc_services::storage::_Drive_default_instance_);
}
inline ::grpc_services::storage::Drive* UpdateDriveResponse::release_drive() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateDriveResponse.drive)
  
  ::grpc_services::storage::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Drive* UpdateDriveResponse::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::grpc_services::storage::Drive;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateDriveResponse.drive)
  return drive_;
}
inline void UpdateDriveResponse::set_allocated_drive(::grpc_services::storage::Drive* drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(drive_);
  }
  if (drive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateDriveResponse.drive)
}

// -------------------------------------------------------------------

// UpdateItemRequest

// .grpc_services.storage.Item item = 1;
inline bool UpdateItemRequest::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline const ::grpc_services::storage::Item& UpdateItemRequest::item() const {
  const ::grpc_services::storage::Item* p = item_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateItemRequest.item)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Item*>(
      &::grpc_services::storage::_Item_default_instance_);
}
inline ::grpc_services::storage::Item* UpdateItemRequest::release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateItemRequest.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Item* UpdateItemRequest::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::grpc_services::storage::Item;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateItemRequest.item)
  return item_;
}
inline void UpdateItemRequest::set_allocated_item(::grpc_services::storage::Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_);
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateItemRequest.item)
}

// -------------------------------------------------------------------

// UpdateItemResponse

// .grpc_services.storage.Item item = 1;
inline bool UpdateItemResponse::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline const ::grpc_services::storage::Item& UpdateItemResponse::item() const {
  const ::grpc_services::storage::Item* p = item_;
  // @@protoc_insertion_point(field_get:grpc_services.storage.UpdateItemResponse.item)
  return p != NULL ? *p : *reinterpret_cast<const ::grpc_services::storage::Item*>(
      &::grpc_services::storage::_Item_default_instance_);
}
inline ::grpc_services::storage::Item* UpdateItemResponse::release_item() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.UpdateItemResponse.item)
  
  ::grpc_services::storage::Item* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::grpc_services::storage::Item* UpdateItemResponse::mutable_item() {
  
  if (item_ == NULL) {
    item_ = new ::grpc_services::storage::Item;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.UpdateItemResponse.item)
  return item_;
}
inline void UpdateItemResponse::set_allocated_item(::grpc_services::storage::Item* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_);
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.UpdateItemResponse.item)
}

// -------------------------------------------------------------------

// RemoveDriveRequest

// string drive_id = 1;
inline void RemoveDriveRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveDriveRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.RemoveDriveRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void RemoveDriveRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.RemoveDriveRequest.drive_id)
}
#if LANG_CXX11
inline void RemoveDriveRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.RemoveDriveRequest.drive_id)
}
#endif
inline void RemoveDriveRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.RemoveDriveRequest.drive_id)
}
inline void RemoveDriveRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.RemoveDriveRequest.drive_id)
}
inline ::std::string* RemoveDriveRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.RemoveDriveRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveDriveRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.RemoveDriveRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveDriveRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.RemoveDriveRequest.drive_id)
}

// -------------------------------------------------------------------

// RemoveDriveResponse

// -------------------------------------------------------------------

// RemoveItemRequest

// string drive_id = 1;
inline void RemoveItemRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveItemRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.RemoveItemRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void RemoveItemRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.RemoveItemRequest.drive_id)
}
#if LANG_CXX11
inline void RemoveItemRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.RemoveItemRequest.drive_id)
}
#endif
inline void RemoveItemRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.RemoveItemRequest.drive_id)
}
inline void RemoveItemRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.RemoveItemRequest.drive_id)
}
inline ::std::string* RemoveItemRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.RemoveItemRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveItemRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.RemoveItemRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveItemRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.RemoveItemRequest.drive_id)
}

// string item_id = 2;
inline void RemoveItemRequest::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveItemRequest::item_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.RemoveItemRequest.item_id)
  return item_id_.GetNoArena();
}
inline void RemoveItemRequest::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.RemoveItemRequest.item_id)
}
#if LANG_CXX11
inline void RemoveItemRequest::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.RemoveItemRequest.item_id)
}
#endif
inline void RemoveItemRequest::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.RemoveItemRequest.item_id)
}
inline void RemoveItemRequest::set_item_id(const char* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.RemoveItemRequest.item_id)
}
inline ::std::string* RemoveItemRequest::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.RemoveItemRequest.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveItemRequest::release_item_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.RemoveItemRequest.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveItemRequest::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.RemoveItemRequest.item_id)
}

// -------------------------------------------------------------------

// RemoveItemResponse

// -------------------------------------------------------------------

// WatchChangesRequest

// string drive_id = 1;
inline void WatchChangesRequest::clear_drive_id() {
  drive_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchChangesRequest::drive_id() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesRequest.drive_id)
  return drive_id_.GetNoArena();
}
inline void WatchChangesRequest::set_drive_id(const ::std::string& value) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_services.storage.WatchChangesRequest.drive_id)
}
#if LANG_CXX11
inline void WatchChangesRequest::set_drive_id(::std::string&& value) {
  
  drive_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_services.storage.WatchChangesRequest.drive_id)
}
#endif
inline void WatchChangesRequest::set_drive_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_services.storage.WatchChangesRequest.drive_id)
}
inline void WatchChangesRequest::set_drive_id(const char* value, size_t size) {
  
  drive_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_services.storage.WatchChangesRequest.drive_id)
}
inline ::std::string* WatchChangesRequest::mutable_drive_id() {
  
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesRequest.drive_id)
  return drive_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchChangesRequest::release_drive_id() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesRequest.drive_id)
  
  return drive_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchChangesRequest::set_allocated_drive_id(::std::string* drive_id) {
  if (drive_id != NULL) {
    
  } else {
    
  }
  drive_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drive_id);
  // @@protoc_insertion_point(field_set_allocated:grpc_services.storage.WatchChangesRequest.drive_id)
}

// -------------------------------------------------------------------

// WatchChangesResponse

// .grpc_services.storage.ItemCreatedEvent created = 1;
inline bool WatchChangesResponse::has_created() const {
  return test_event_case() == kCreated;
}
inline void WatchChangesResponse::set_has_created() {
  _oneof_case_[0] = kCreated;
}
inline ::grpc_services::storage::ItemCreatedEvent* WatchChangesResponse::release_created() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesResponse.created)
  if (has_created()) {
    clear_has_test_event();
      ::grpc_services::storage::ItemCreatedEvent* temp = test_event_.created_;
    test_event_.created_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grpc_services::storage::ItemCreatedEvent& WatchChangesResponse::created() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesResponse.created)
  return has_created()
      ? *test_event_.created_
      : *reinterpret_cast< ::grpc_services::storage::ItemCreatedEvent*>(&::grpc_services::storage::_ItemCreatedEvent_default_instance_);
}
inline ::grpc_services::storage::ItemCreatedEvent* WatchChangesResponse::mutable_created() {
  if (!has_created()) {
    clear_test_event();
    set_has_created();
    test_event_.created_ = new ::grpc_services::storage::ItemCreatedEvent;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesResponse.created)
  return test_event_.created_;
}

// .grpc_services.storage.ItemRemovedEvent removed = 2;
inline bool WatchChangesResponse::has_removed() const {
  return test_event_case() == kRemoved;
}
inline void WatchChangesResponse::set_has_removed() {
  _oneof_case_[0] = kRemoved;
}
inline ::grpc_services::storage::ItemRemovedEvent* WatchChangesResponse::release_removed() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesResponse.removed)
  if (has_removed()) {
    clear_has_test_event();
      ::grpc_services::storage::ItemRemovedEvent* temp = test_event_.removed_;
    test_event_.removed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grpc_services::storage::ItemRemovedEvent& WatchChangesResponse::removed() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesResponse.removed)
  return has_removed()
      ? *test_event_.removed_
      : *reinterpret_cast< ::grpc_services::storage::ItemRemovedEvent*>(&::grpc_services::storage::_ItemRemovedEvent_default_instance_);
}
inline ::grpc_services::storage::ItemRemovedEvent* WatchChangesResponse::mutable_removed() {
  if (!has_removed()) {
    clear_test_event();
    set_has_removed();
    test_event_.removed_ = new ::grpc_services::storage::ItemRemovedEvent;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesResponse.removed)
  return test_event_.removed_;
}

// .grpc_services.storage.ItemContentUpdatedEvent updated = 3;
inline bool WatchChangesResponse::has_updated() const {
  return test_event_case() == kUpdated;
}
inline void WatchChangesResponse::set_has_updated() {
  _oneof_case_[0] = kUpdated;
}
inline ::grpc_services::storage::ItemContentUpdatedEvent* WatchChangesResponse::release_updated() {
  // @@protoc_insertion_point(field_release:grpc_services.storage.WatchChangesResponse.updated)
  if (has_updated()) {
    clear_has_test_event();
      ::grpc_services::storage::ItemContentUpdatedEvent* temp = test_event_.updated_;
    test_event_.updated_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::grpc_services::storage::ItemContentUpdatedEvent& WatchChangesResponse::updated() const {
  // @@protoc_insertion_point(field_get:grpc_services.storage.WatchChangesResponse.updated)
  return has_updated()
      ? *test_event_.updated_
      : *reinterpret_cast< ::grpc_services::storage::ItemContentUpdatedEvent*>(&::grpc_services::storage::_ItemContentUpdatedEvent_default_instance_);
}
inline ::grpc_services::storage::ItemContentUpdatedEvent* WatchChangesResponse::mutable_updated() {
  if (!has_updated()) {
    clear_test_event();
    set_has_updated();
    test_event_.updated_ = new ::grpc_services::storage::ItemContentUpdatedEvent;
  }
  // @@protoc_insertion_point(field_mutable:grpc_services.storage.WatchChangesResponse.updated)
  return test_event_.updated_;
}

inline bool WatchChangesResponse::has_test_event() const {
  return test_event_case() != TEST_EVENT_NOT_SET;
}
inline void WatchChangesResponse::clear_has_test_event() {
  _oneof_case_[0] = TEST_EVENT_NOT_SET;
}
inline WatchChangesResponse::TestEventCase WatchChangesResponse::test_event_case() const {
  return WatchChangesResponse::TestEventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace grpc_services

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2fstorage_2eproto__INCLUDED
