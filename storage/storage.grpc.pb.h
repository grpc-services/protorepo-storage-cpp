// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage/storage.proto
#ifndef GRPC_storage_2fstorage_2eproto__INCLUDED
#define GRPC_storage_2fstorage_2eproto__INCLUDED

#include "storage/storage.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc_services {
namespace storage {

class StorageService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_services.storage.StorageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc_services::storage::GetDriveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDriveResponse>> AsyncGetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDriveResponse>>(AsyncGetDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDriveResponse>> PrepareAsyncGetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDriveResponse>>(PrepareAsyncGetDriveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc_services::storage::GetDrivesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDrivesResponse>> AsyncGetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDrivesResponse>>(AsyncGetDrivesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDrivesResponse>> PrepareAsyncGetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDrivesResponse>>(PrepareAsyncGetDrivesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc_services::storage::GetItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetItemResponse>> AsyncGetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetItemResponse>>(AsyncGetItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetItemResponse>> PrepareAsyncGetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetItemResponse>>(PrepareAsyncGetItemRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc_services::storage::GetChildrenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetChildrenResponse>> AsyncGetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetChildrenResponse>>(AsyncGetChildrenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetChildrenResponse>> PrepareAsyncGetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetChildrenResponse>>(PrepareAsyncGetChildrenRaw(context, request, cq));
    }
    virtual ::grpc::Status GetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc_services::storage::GetContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetContentResponse>> AsyncGetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetContentResponse>>(AsyncGetContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetContentResponse>> PrepareAsyncGetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetContentResponse>>(PrepareAsyncGetContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::grpc_services::storage::GetContentStreamResponse>> GetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::grpc_services::storage::GetContentStreamResponse>>(GetContentStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::GetContentStreamResponse>> AsyncGetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::GetContentStreamResponse>>(AsyncGetContentStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::GetContentStreamResponse>> PrepareAsyncGetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::GetContentStreamResponse>>(PrepareAsyncGetContentStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc_services::storage::CreateDriveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateDriveResponse>> AsyncCreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateDriveResponse>>(AsyncCreateDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateDriveResponse>> PrepareAsyncCreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateDriveResponse>>(PrepareAsyncCreateDriveRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc_services::storage::CreateItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateItemResponse>> AsyncCreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateItemResponse>>(AsyncCreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateItemResponse>> PrepareAsyncCreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateItemResponse>>(PrepareAsyncCreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::grpc_services::storage::PutContentStreamRequest>> PutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::grpc_services::storage::PutContentStreamRequest>>(PutContentStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpc_services::storage::PutContentStreamRequest>> AsyncPutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpc_services::storage::PutContentStreamRequest>>(AsyncPutContentStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpc_services::storage::PutContentStreamRequest>> PrepareAsyncPutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::grpc_services::storage::PutContentStreamRequest>>(PrepareAsyncPutContentStreamRaw(context, response, cq));
    }
    virtual ::grpc::Status TruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc_services::storage::TruncateContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::TruncateContentResponse>> AsyncTruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::TruncateContentResponse>>(AsyncTruncateContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::TruncateContentResponse>> PrepareAsyncTruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::TruncateContentResponse>>(PrepareAsyncTruncateContentRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc_services::storage::UpdateDriveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateDriveResponse>> AsyncUpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateDriveResponse>>(AsyncUpdateDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateDriveResponse>> PrepareAsyncUpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateDriveResponse>>(PrepareAsyncUpdateDriveRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc_services::storage::UpdateItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateItemResponse>> AsyncUpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateItemResponse>>(AsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateItemResponse>> PrepareAsyncUpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateItemResponse>>(PrepareAsyncUpdateItemRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc_services::storage::RemoveDriveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveDriveResponse>> AsyncRemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveDriveResponse>>(AsyncRemoveDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveDriveResponse>> PrepareAsyncRemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveDriveResponse>>(PrepareAsyncRemoveDriveRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc_services::storage::RemoveItemResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveItemResponse>> AsyncRemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveItemResponse>>(AsyncRemoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveItemResponse>> PrepareAsyncRemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveItemResponse>>(PrepareAsyncRemoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::grpc_services::storage::WatchChangesResponse>> WatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::grpc_services::storage::WatchChangesResponse>>(WatchChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::WatchChangesResponse>> AsyncWatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::WatchChangesResponse>>(AsyncWatchChangesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::WatchChangesResponse>> PrepareAsyncWatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::WatchChangesResponse>>(PrepareAsyncWatchChangesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDriveResponse>* AsyncGetDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDriveResponse>* PrepareAsyncGetDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDrivesResponse>* AsyncGetDrivesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetDrivesResponse>* PrepareAsyncGetDrivesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetItemResponse>* AsyncGetItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetItemResponse>* PrepareAsyncGetItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetChildrenResponse>* AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetChildrenResponse>* PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetContentResponse>* AsyncGetContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::GetContentResponse>* PrepareAsyncGetContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::grpc_services::storage::GetContentStreamResponse>* GetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::GetContentStreamResponse>* AsyncGetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::GetContentStreamResponse>* PrepareAsyncGetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateDriveResponse>* AsyncCreateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateDriveResponse>* PrepareAsyncCreateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateItemResponse>* AsyncCreateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::CreateItemResponse>* PrepareAsyncCreateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::grpc_services::storage::PutContentStreamRequest>* PutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpc_services::storage::PutContentStreamRequest>* AsyncPutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::grpc_services::storage::PutContentStreamRequest>* PrepareAsyncPutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::TruncateContentResponse>* AsyncTruncateContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::TruncateContentResponse>* PrepareAsyncTruncateContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateDriveResponse>* AsyncUpdateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateDriveResponse>* PrepareAsyncUpdateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateItemResponse>* AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::UpdateItemResponse>* PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveDriveResponse>* AsyncRemoveDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveDriveResponse>* PrepareAsyncRemoveDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveItemResponse>* AsyncRemoveItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_services::storage::RemoveItemResponse>* PrepareAsyncRemoveItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::grpc_services::storage::WatchChangesResponse>* WatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::WatchChangesResponse>* AsyncWatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grpc_services::storage::WatchChangesResponse>* PrepareAsyncWatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc_services::storage::GetDriveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>> AsyncGetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>>(AsyncGetDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>> PrepareAsyncGetDrive(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>>(PrepareAsyncGetDriveRaw(context, request, cq));
    }
    ::grpc::Status GetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc_services::storage::GetDrivesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>> AsyncGetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>>(AsyncGetDrivesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>> PrepareAsyncGetDrives(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>>(PrepareAsyncGetDrivesRaw(context, request, cq));
    }
    ::grpc::Status GetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc_services::storage::GetItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>> AsyncGetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>>(AsyncGetItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>> PrepareAsyncGetItem(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>>(PrepareAsyncGetItemRaw(context, request, cq));
    }
    ::grpc::Status GetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc_services::storage::GetChildrenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>> AsyncGetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>>(AsyncGetChildrenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>> PrepareAsyncGetChildren(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>>(PrepareAsyncGetChildrenRaw(context, request, cq));
    }
    ::grpc::Status GetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc_services::storage::GetContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>> AsyncGetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>>(AsyncGetContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>> PrepareAsyncGetContent(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>>(PrepareAsyncGetContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::grpc_services::storage::GetContentStreamResponse>> GetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::grpc_services::storage::GetContentStreamResponse>>(GetContentStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>> AsyncGetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>>(AsyncGetContentStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>> PrepareAsyncGetContentStream(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>>(PrepareAsyncGetContentStreamRaw(context, request, cq));
    }
    ::grpc::Status CreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc_services::storage::CreateDriveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>> AsyncCreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>>(AsyncCreateDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>> PrepareAsyncCreateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>>(PrepareAsyncCreateDriveRaw(context, request, cq));
    }
    ::grpc::Status CreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc_services::storage::CreateItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>> AsyncCreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>>(AsyncCreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>> PrepareAsyncCreateItem(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>>(PrepareAsyncCreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::grpc_services::storage::PutContentStreamRequest>> PutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::grpc_services::storage::PutContentStreamRequest>>(PutContentStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>> AsyncPutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>>(AsyncPutContentStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>> PrepareAsyncPutContentStream(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>>(PrepareAsyncPutContentStreamRaw(context, response, cq));
    }
    ::grpc::Status TruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc_services::storage::TruncateContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>> AsyncTruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>>(AsyncTruncateContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>> PrepareAsyncTruncateContent(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>>(PrepareAsyncTruncateContentRaw(context, request, cq));
    }
    ::grpc::Status UpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc_services::storage::UpdateDriveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>> AsyncUpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>>(AsyncUpdateDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>> PrepareAsyncUpdateDrive(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>>(PrepareAsyncUpdateDriveRaw(context, request, cq));
    }
    ::grpc::Status UpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc_services::storage::UpdateItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>> AsyncUpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>>(AsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>> PrepareAsyncUpdateItem(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>>(PrepareAsyncUpdateItemRaw(context, request, cq));
    }
    ::grpc::Status RemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc_services::storage::RemoveDriveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>> AsyncRemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>>(AsyncRemoveDriveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>> PrepareAsyncRemoveDrive(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>>(PrepareAsyncRemoveDriveRaw(context, request, cq));
    }
    ::grpc::Status RemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc_services::storage::RemoveItemResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>> AsyncRemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>>(AsyncRemoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>> PrepareAsyncRemoveItem(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>>(PrepareAsyncRemoveItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::grpc_services::storage::WatchChangesResponse>> WatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::grpc_services::storage::WatchChangesResponse>>(WatchChangesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>> AsyncWatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>>(AsyncWatchChangesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>> PrepareAsyncWatchChanges(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>>(PrepareAsyncWatchChangesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>* AsyncGetDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDriveResponse>* PrepareAsyncGetDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>* AsyncGetDrivesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetDrivesResponse>* PrepareAsyncGetDrivesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetDrivesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>* AsyncGetItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetItemResponse>* PrepareAsyncGetItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>* AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetChildrenResponse>* PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetChildrenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>* AsyncGetContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::GetContentResponse>* PrepareAsyncGetContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::grpc_services::storage::GetContentStreamResponse>* GetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>* AsyncGetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::grpc_services::storage::GetContentStreamResponse>* PrepareAsyncGetContentStreamRaw(::grpc::ClientContext* context, const ::grpc_services::storage::GetContentStreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>* AsyncCreateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateDriveResponse>* PrepareAsyncCreateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>* AsyncCreateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::CreateItemResponse>* PrepareAsyncCreateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::CreateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::grpc_services::storage::PutContentStreamRequest>* PutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response) override;
    ::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>* AsyncPutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::grpc_services::storage::PutContentStreamRequest>* PrepareAsyncPutContentStreamRaw(::grpc::ClientContext* context, ::grpc_services::storage::PutContentStreamResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>* AsyncTruncateContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::TruncateContentResponse>* PrepareAsyncTruncateContentRaw(::grpc::ClientContext* context, const ::grpc_services::storage::TruncateContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>* AsyncUpdateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateDriveResponse>* PrepareAsyncUpdateDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>* AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::UpdateItemResponse>* PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>* AsyncRemoveDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveDriveResponse>* PrepareAsyncRemoveDriveRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveDriveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>* AsyncRemoveItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_services::storage::RemoveItemResponse>* PrepareAsyncRemoveItemRaw(::grpc::ClientContext* context, const ::grpc_services::storage::RemoveItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::grpc_services::storage::WatchChangesResponse>* WatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request) override;
    ::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>* AsyncWatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::grpc_services::storage::WatchChangesResponse>* PrepareAsyncWatchChangesRaw(::grpc::ClientContext* context, const ::grpc_services::storage::WatchChangesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDrive_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDrives_;
    const ::grpc::internal::RpcMethod rpcmethod_GetItem_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChildren_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContentStream_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDrive_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateItem_;
    const ::grpc::internal::RpcMethod rpcmethod_PutContentStream_;
    const ::grpc::internal::RpcMethod rpcmethod_TruncateContent_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDrive_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateItem_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveDrive_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveItem_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchChanges_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetDrive(::grpc::ServerContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response);
    virtual ::grpc::Status GetDrives(::grpc::ServerContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response);
    virtual ::grpc::Status GetItem(::grpc::ServerContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response);
    virtual ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response);
    virtual ::grpc::Status GetContent(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response);
    virtual ::grpc::Status GetContentStream(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::GetContentStreamResponse>* writer);
    virtual ::grpc::Status CreateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response);
    virtual ::grpc::Status CreateItem(::grpc::ServerContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response);
    virtual ::grpc::Status PutContentStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpc_services::storage::PutContentStreamRequest>* reader, ::grpc_services::storage::PutContentStreamResponse* response);
    virtual ::grpc::Status TruncateContent(::grpc::ServerContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response);
    virtual ::grpc::Status UpdateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response);
    virtual ::grpc::Status UpdateItem(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response);
    virtual ::grpc::Status RemoveDrive(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response);
    virtual ::grpc::Status RemoveItem(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response);
    virtual ::grpc::Status WatchChanges(::grpc::ServerContext* context, const ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::WatchChangesResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDrive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDrive(::grpc::ServerContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDrive(::grpc::ServerContext* context, ::grpc_services::storage::GetDriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::GetDriveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDrives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDrives() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDrives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDrives(::grpc::ServerContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDrives(::grpc::ServerContext* context, ::grpc_services::storage::GetDrivesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::GetDrivesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetItem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItem(::grpc::ServerContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetItem(::grpc::ServerContext* context, ::grpc_services::storage::GetItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::GetItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetChildren() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildren(::grpc::ServerContext* context, ::grpc_services::storage::GetChildrenRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::GetChildrenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetContent() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContent(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContent(::grpc::ServerContext* context, ::grpc_services::storage::GetContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::GetContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContentStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetContentStream() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetContentStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContentStream(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::GetContentStreamResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContentStream(::grpc::ServerContext* context, ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ServerAsyncWriter< ::grpc_services::storage::GetContentStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateDrive() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDrive(::grpc::ServerContext* context, ::grpc_services::storage::CreateDriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::CreateDriveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateItem() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateItem(::grpc::ServerContext* context, ::grpc_services::storage::CreateItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::CreateItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutContentStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutContentStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PutContentStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContentStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpc_services::storage::PutContentStreamRequest>* reader, ::grpc_services::storage::PutContentStreamResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutContentStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc_services::storage::PutContentStreamResponse, ::grpc_services::storage::PutContentStreamRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TruncateContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TruncateContent() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_TruncateContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TruncateContent(::grpc::ServerContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTruncateContent(::grpc::ServerContext* context, ::grpc_services::storage::TruncateContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::TruncateContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateDrive() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDrive(::grpc::ServerContext* context, ::grpc_services::storage::UpdateDriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::UpdateDriveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateItem() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItem(::grpc::ServerContext* context, ::grpc_services::storage::UpdateItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::UpdateItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveDrive() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_RemoveDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDrive(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveDrive(::grpc::ServerContext* context, ::grpc_services::storage::RemoveDriveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::RemoveDriveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveItem() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveItem(::grpc::ServerContext* context, ::grpc_services::storage::RemoveItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_services::storage::RemoveItemResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WatchChanges() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_WatchChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChanges(::grpc::ServerContext* context, const ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::WatchChangesResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchChanges(::grpc::ServerContext* context, ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ServerAsyncWriter< ::grpc_services::storage::WatchChangesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDrive<WithAsyncMethod_GetDrives<WithAsyncMethod_GetItem<WithAsyncMethod_GetChildren<WithAsyncMethod_GetContent<WithAsyncMethod_GetContentStream<WithAsyncMethod_CreateDrive<WithAsyncMethod_CreateItem<WithAsyncMethod_PutContentStream<WithAsyncMethod_TruncateContent<WithAsyncMethod_UpdateDrive<WithAsyncMethod_UpdateItem<WithAsyncMethod_RemoveDrive<WithAsyncMethod_RemoveItem<WithAsyncMethod_WatchChanges<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDrive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDrive(::grpc::ServerContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDrives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDrives() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDrives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDrives(::grpc::ServerContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetItem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItem(::grpc::ServerContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetChildren() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetContent() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContent(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContentStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetContentStream() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetContentStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContentStream(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::GetContentStreamResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateDrive() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateItem() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutContentStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutContentStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PutContentStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutContentStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::grpc_services::storage::PutContentStreamRequest>* reader, ::grpc_services::storage::PutContentStreamResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TruncateContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TruncateContent() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_TruncateContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TruncateContent(::grpc::ServerContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateDrive() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateItem() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveDrive() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_RemoveDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveDrive(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveItem() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WatchChanges() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_WatchChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChanges(::grpc::ServerContext* context, const ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::WatchChangesResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDrive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::GetDriveRequest, ::grpc_services::storage::GetDriveResponse>(std::bind(&WithStreamedUnaryMethod_GetDrive<BaseClass>::StreamedGetDrive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDrive(::grpc::ServerContext* context, const ::grpc_services::storage::GetDriveRequest* request, ::grpc_services::storage::GetDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDrive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::GetDriveRequest,::grpc_services::storage::GetDriveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDrives : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDrives() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::GetDrivesRequest, ::grpc_services::storage::GetDrivesResponse>(std::bind(&WithStreamedUnaryMethod_GetDrives<BaseClass>::StreamedGetDrives, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDrives() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDrives(::grpc::ServerContext* context, const ::grpc_services::storage::GetDrivesRequest* request, ::grpc_services::storage::GetDrivesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDrives(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::GetDrivesRequest,::grpc_services::storage::GetDrivesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetItem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::GetItemRequest, ::grpc_services::storage::GetItemResponse>(std::bind(&WithStreamedUnaryMethod_GetItem<BaseClass>::StreamedGetItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetItem(::grpc::ServerContext* context, const ::grpc_services::storage::GetItemRequest* request, ::grpc_services::storage::GetItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::GetItemRequest,::grpc_services::storage::GetItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetChildren() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::GetChildrenRequest, ::grpc_services::storage::GetChildrenResponse>(std::bind(&WithStreamedUnaryMethod_GetChildren<BaseClass>::StreamedGetChildren, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::grpc_services::storage::GetChildrenRequest* request, ::grpc_services::storage::GetChildrenResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChildren(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::GetChildrenRequest,::grpc_services::storage::GetChildrenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetContent() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::GetContentRequest, ::grpc_services::storage::GetContentResponse>(std::bind(&WithStreamedUnaryMethod_GetContent<BaseClass>::StreamedGetContent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContent(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentRequest* request, ::grpc_services::storage::GetContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::GetContentRequest,::grpc_services::storage::GetContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateDrive() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::CreateDriveRequest, ::grpc_services::storage::CreateDriveResponse>(std::bind(&WithStreamedUnaryMethod_CreateDrive<BaseClass>::StreamedCreateDrive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::CreateDriveRequest* request, ::grpc_services::storage::CreateDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDrive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::CreateDriveRequest,::grpc_services::storage::CreateDriveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateItem() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::CreateItemRequest, ::grpc_services::storage::CreateItemResponse>(std::bind(&WithStreamedUnaryMethod_CreateItem<BaseClass>::StreamedCreateItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* context, const ::grpc_services::storage::CreateItemRequest* request, ::grpc_services::storage::CreateItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::CreateItemRequest,::grpc_services::storage::CreateItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TruncateContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TruncateContent() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::TruncateContentRequest, ::grpc_services::storage::TruncateContentResponse>(std::bind(&WithStreamedUnaryMethod_TruncateContent<BaseClass>::StreamedTruncateContent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TruncateContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TruncateContent(::grpc::ServerContext* context, const ::grpc_services::storage::TruncateContentRequest* request, ::grpc_services::storage::TruncateContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTruncateContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::TruncateContentRequest,::grpc_services::storage::TruncateContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateDrive() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::UpdateDriveRequest, ::grpc_services::storage::UpdateDriveResponse>(std::bind(&WithStreamedUnaryMethod_UpdateDrive<BaseClass>::StreamedUpdateDrive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDrive(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateDriveRequest* request, ::grpc_services::storage::UpdateDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDrive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::UpdateDriveRequest,::grpc_services::storage::UpdateDriveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateItem() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::UpdateItemRequest, ::grpc_services::storage::UpdateItemResponse>(std::bind(&WithStreamedUnaryMethod_UpdateItem<BaseClass>::StreamedUpdateItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* context, const ::grpc_services::storage::UpdateItemRequest* request, ::grpc_services::storage::UpdateItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::UpdateItemRequest,::grpc_services::storage::UpdateItemResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveDrive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveDrive() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::RemoveDriveRequest, ::grpc_services::storage::RemoveDriveResponse>(std::bind(&WithStreamedUnaryMethod_RemoveDrive<BaseClass>::StreamedRemoveDrive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveDrive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveDrive(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveDriveRequest* request, ::grpc_services::storage::RemoveDriveResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveDrive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::RemoveDriveRequest,::grpc_services::storage::RemoveDriveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveItem() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_services::storage::RemoveItemRequest, ::grpc_services::storage::RemoveItemResponse>(std::bind(&WithStreamedUnaryMethod_RemoveItem<BaseClass>::StreamedRemoveItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveItem(::grpc::ServerContext* context, const ::grpc_services::storage::RemoveItemRequest* request, ::grpc_services::storage::RemoveItemResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_services::storage::RemoveItemRequest,::grpc_services::storage::RemoveItemResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDrive<WithStreamedUnaryMethod_GetDrives<WithStreamedUnaryMethod_GetItem<WithStreamedUnaryMethod_GetChildren<WithStreamedUnaryMethod_GetContent<WithStreamedUnaryMethod_CreateDrive<WithStreamedUnaryMethod_CreateItem<WithStreamedUnaryMethod_TruncateContent<WithStreamedUnaryMethod_UpdateDrive<WithStreamedUnaryMethod_UpdateItem<WithStreamedUnaryMethod_RemoveDrive<WithStreamedUnaryMethod_RemoveItem<Service > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetContentStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetContentStream() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::grpc_services::storage::GetContentStreamRequest, ::grpc_services::storage::GetContentStreamResponse>(std::bind(&WithSplitStreamingMethod_GetContentStream<BaseClass>::StreamedGetContentStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetContentStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContentStream(::grpc::ServerContext* context, const ::grpc_services::storage::GetContentStreamRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::GetContentStreamResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetContentStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::grpc_services::storage::GetContentStreamRequest,::grpc_services::storage::GetContentStreamResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchChanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_WatchChanges() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler< ::grpc_services::storage::WatchChangesRequest, ::grpc_services::storage::WatchChangesResponse>(std::bind(&WithSplitStreamingMethod_WatchChanges<BaseClass>::StreamedWatchChanges, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_WatchChanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchChanges(::grpc::ServerContext* context, const ::grpc_services::storage::WatchChangesRequest* request, ::grpc::ServerWriter< ::grpc_services::storage::WatchChangesResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchChanges(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::grpc_services::storage::WatchChangesRequest,::grpc_services::storage::WatchChangesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetContentStream<WithSplitStreamingMethod_WatchChanges<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDrive<WithStreamedUnaryMethod_GetDrives<WithStreamedUnaryMethod_GetItem<WithStreamedUnaryMethod_GetChildren<WithStreamedUnaryMethod_GetContent<WithSplitStreamingMethod_GetContentStream<WithStreamedUnaryMethod_CreateDrive<WithStreamedUnaryMethod_CreateItem<WithStreamedUnaryMethod_TruncateContent<WithStreamedUnaryMethod_UpdateDrive<WithStreamedUnaryMethod_UpdateItem<WithStreamedUnaryMethod_RemoveDrive<WithStreamedUnaryMethod_RemoveItem<WithSplitStreamingMethod_WatchChanges<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace storage
}  // namespace grpc_services


#endif  // GRPC_storage_2fstorage_2eproto__INCLUDED
